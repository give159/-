# 🚀 Python OOP 社員管理システム - 新人エンジニア向けチートシート

## 📌 このチートシートについて

**対象者**: プログラミング初心者・新人エンジニア  
**目的**: オブジェクト指向プログラミング（OOP）の実践的な学習  
**所要時間**: 3-5時間  
**難易度**: ⭐⭐☆☆☆（初級〜中級）

---

## 🎯 学習目標

このプロジェクトを完成させると、以下のスキルが身につきます：

- ✅ クラスの作成と使い方
- ✅ 継承（親子関係）の実装
- ✅ メソッドのオーバーライド
- ✅ デコレータの使い方
- ✅ プロパティの実装
- ✅ ユニットテストの書き方

---

## 📁 プロジェクト構成

```
project/
├── employee.py          # 基底クラス（土台）
├── staff.py            # 一般社員クラス
├── president.py        # 社長クラス
├── company.py          # 会社クラス
├── test_employee.py    # テスト1
├── test_staff.py       # テスト2
├── test_president.py   # テスト3
├── test_company.py     # テスト4
├── test_integration.py # 統合テスト
└── run_all_tests.py    # 全テスト実行
```

**合計**: 10ファイル

---

## 🛠️ セットアップ（5分）

### 1. フォルダを作成

```bash
# Windowsの場合
mkdir employee_system
cd employee_system

# Mac/Linuxの場合
mkdir employee_system
cd employee_system
```

### 2. Python バージョン確認

```bash
python --version
# Python 3.7 以上が必要
```

### 3. 必要なライブラリ

```python
# 標準ライブラリのみ使用（追加インストール不要）
import unittest  # テスト用
from typing import List  # 型ヒント用
from functools import wraps  # デコレータ用
```

---

## 📝 実装手順（ステップバイステップ）

### ステップ1: employee.py（15分）

**役割**: すべての社員の基底クラス（土台）

```python
class Employee:
    """社員の基底クラス"""
    
    def __init__(self):
        """初期化"""
        self._name: str = ""      # 名前
        self._salary: int = 0     # 給料
    
    def get_name(self) -> str:
        """名前を取得"""
        return self._name
    
    def set_name(self, emp_name: str) -> None:
        """名前を設定"""
        self._name = emp_name
    
    def get_salary(self) -> int:
        """給料を取得"""
        return self._salary
    
    def set_salary(self, emp_salary: int) -> None:
        """給料を設定"""
        self._salary = emp_salary
    
    def __del__(self):
        """デストラクタ"""
        print(f"[削除] Employee '{self._name}'")
```

**ポイント**:
- `_name`: アンダースコアはプライベート変数の印
- `self`: 自分自身を指す
- `-> str`: 戻り値の型を明示

---

### ステップ2: staff.py（10分）

**役割**: 一般社員クラス（Employeeを継承）

```python
from employee import Employee

class Staff(Employee):
    """一般社員クラス"""
    
    def __init__(self):
        """初期化"""
        super().__init__()        # 親の初期化を呼ぶ
        self._division: str = ""  # 部署（追加）
    
    def get_division(self) -> str:
        """部署を取得"""
        return self._division
    
    def set_division(self, emp_division: str) -> None:
        """部署を設定"""
        self._division = emp_division
    
    def __del__(self):
        """デストラクタ"""
        print(f"[削除] Staff '{self._name}'")
```

**ポイント**:
- `class Staff(Employee)`: 継承の書き方
- `super().__init__()`: 親のコンストラクタを呼ぶ
- 親の機能 + 独自の機能（部署）

---

### ステップ3: president.py（15分）

**役割**: 社長クラス（解雇機能あり）

```python
from employee import Employee
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from company import Company

class President(Employee):
    """社長クラス"""
    
    def __init__(self, company: 'Company'):
        """初期化"""
        super().__init__()
        self._company: 'Company' = company  # 会社への参照
    
    def get_name(self) -> str:
        """名前を取得（オーバーライド）"""
        return self._name + "社長"  # 「社長」を追加
    
    def dismiss(self, name: str) -> None:
        """社員を解雇する"""
        # リスト内包表記で指定社員以外を残す
        self._company._staffs = [
            staff for staff in self._company._staffs 
            if staff.get_name() != name
        ]
        print(f"[解雇] {name}さんを解雇")
    
    def __del__(self):
        """デストラクタ"""
        print(f"[削除] President '{self._name}'")
```

**ポイント**:
- `get_name()`: 親のメソッドを上書き（オーバーライド）
- リスト内包表記: `[x for x in list if 条件]`
- `'Company'`: 文字列で型ヒント（前方参照）

---

### ステップ4: company.py（20分）

**役割**: 会社クラス（社員と社長を管理）

```python
from typing import List
from functools import wraps
from staff import Staff
from president import President

# デコレータ関数
def print_employee_count(func):
    """社員数を表示するデコレータ"""
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        result = func(self, *args, **kwargs)
        total = len(self._staffs) + 1  # 社員 + 社長
        print(f"現在の社員数: {total}人")
        return result
    return wrapper

class Company:
    """会社クラス"""
    
    def __init__(self):
        """初期化"""
        self._staffs: List[Staff] = []      # 社員リスト
        self._ceo: President = President(self)  # 社長
    
    @property
    def staffs(self) -> List[Staff]:
        """社員リストを取得（プロパティ）"""
        return self._staffs
    
    @property
    def ceo(self) -> President:
        """社長を取得（プロパティ）"""
        return self._ceo
    
    @print_employee_count
    def set_dismissal_procedure(self, name: str) -> None:
        """解雇手続き（デコレータ付き）"""
        self._staffs = [
            staff for staff in self._staffs 
            if staff.get_name() != name
        ]
        print(f"[手続き完了] {name}さんの解雇")
    
    def __del__(self):
        """デストラクタ"""
        print("[削除] Company")
```

**ポイント**:
- デコレータ: 関数に機能を追加
- `@property`: メソッドを属性のように使う
- `company.staffs` で呼べる（`()`不要）

---

## 🧪 テストの書き方（基本パターン）

### テンプレート

```python
import unittest
from クラス名 import クラス名

class Testクラス名(unittest.TestCase):
    """テストクラス"""
    
    def setUp(self):
        """各テスト前に実行"""
        self.obj = クラス名()
    
    def test_機能名(self):
        """テストメソッド"""
        # 準備
        self.obj.set_value(100)
        
        # 実行と検証
        self.assertEqual(self.obj.get_value(), 100)
        
        # 成功メッセージ
        print("✓ テスト成功")

if __name__ == "__main__":
    unittest.main(verbosity=2)
```

### よく使うアサーション

```python
# 等しいかチェック
self.assertEqual(a, b)

# 真偽チェック
self.assertTrue(条件)
self.assertFalse(条件)

# 型チェック
self.assertIsInstance(obj, クラス)

# 含まれているかチェック
self.assertIn(要素, リスト)
self.assertNotIn(要素, リスト)

# None チェック
self.assertIsNotNone(値)
```

---

## 🎨 重要な概念の図解

### 1. 継承の関係

```
Employee（親）
    ├── _name
    ├── _salary
    ├── get_name()
    ├── set_name()
    └── ...
         ↓ 継承
    ┌────────────────┐
    ↓                ↓
Staff（子1）      President（子2）
    ├── _name（継承）    ├── _name（継承）
    ├── _salary（継承）  ├── _salary（継承）
    ├── _division（追加）├── _company（追加）
    └── ...             └── get_name()（上書き）
```

### 2. デコレータの動き

```python
# デコレータなし
def method():
    処理

# デコレータあり
@decorator
def method():
    処理

# ↓ これは以下と同じ
def method():
    処理
method = decorator(method)
```

実行時：
```
1. decorator が method を受け取る
2. wrapper 関数を作成
3. wrapper が method を実行
4. 前後に追加処理
5. 結果を返す
```

### 3. プロパティの使い方

```python
# 通常のメソッド
company.get_staffs()  # () が必要

# プロパティ
@property
def staffs(self):
    return self._staffs

company.staffs  # () 不要（属性のように使える）
```

---

## 💡 よくあるエラーと解決法

### エラー1: ModuleNotFoundError

```
ModuleNotFoundError: No module named 'employee'
```

**原因**: ファイルが見つからない  
**解決**: すべてのファイルが同じフォルダにあるか確認

```bash
# 確認コマンド
ls *.py  # Mac/Linux
dir *.py  # Windows
```

### エラー2: IndentationError

```
IndentationError: expected an indented block
```

**原因**: インデント（字下げ）が間違っている  
**解決**: スペース4つで統一（タブと混在させない）

```python
# ❌ 間違い
def method():
print("Hello")  # インデントなし

# ✅ 正しい
def method():
    print("Hello")  # スペース4つ
```

### エラー3: AttributeError

```
AttributeError: 'Staff' object has no attribute '_name'
```

**原因**: `super().__init__()` を忘れている  
**解決**: 子クラスで親の初期化を呼ぶ

```python
# ❌ 間違い
class Staff(Employee):
    def __init__(self):
        self._division = ""  # 親の初期化なし

# ✅ 正しい
class Staff(Employee):
    def __init__(self):
        super().__init__()  # 親の初期化
        self._division = ""
```

### エラー4: NameError

```
NameError: name 'self' is not defined
```

**原因**: メソッドの第一引数に `self` がない  
**解決**: すべてのインスタンスメソッドに `self` を付ける

```python
# ❌ 間違い
def get_name():  # self がない
    return self._name

# ✅ 正しい
def get_name(self):  # self あり
    return self._name
```

---

## 🚀 実行方法

### 個別テスト実行

```bash
python test_employee.py
python test_staff.py
python test_president.py
python test_company.py
python test_integration.py
```

### 全テスト実行

```bash
python run_all_tests.py
```

### 期待される出力

```
============================================================
社員管理システム - 全テスト実行
============================================================

実行するテストファイル:
  1. test_employee.py    - Employeeクラステスト
  ...

✓ test_employee.py を読み込みました
✓ test_staff.py を読み込みました
...

============================================================
テスト実行開始
============================================================

test_initial_values ... ok
test_set_and_get_name ... ok
...

----------------------------------------------------------------------
Ran 50 tests in 0.123s

OK

============================================================
テスト結果サマリー
============================================================
実行テスト数: 50
成功: 50
失敗: 0
エラー: 0

🎉 すべてのテストが成功しました！
```

---

## 📚 重要な用語集

| 用語 | 説明 | 例 |
|------|------|-----|
| **クラス** | オブジェクトの設計図 | `class Employee:` |
| **インスタンス** | クラスから作った実体 | `emp = Employee()` |
| **継承** | 親の機能を受け継ぐ | `class Staff(Employee):` |
| **オーバーライド** | 親のメソッドを上書き | `get_name()` を書き換え |
| **self** | 自分自身を指す | `self._name` |
| **コンストラクタ** | 初期化メソッド | `__init__()` |
| **デストラクタ** | 破壊メソッド | `__del__()` |
| **デコレータ** | 関数に機能を追加 | `@property` |
| **プロパティ** | 属性のようなメソッド | `company.staffs` |
| **型ヒント** | 型を明示 | `name: str` |
| **docstring** | 説明文 | `"""説明"""` |

---

## 🎯 チェックリスト

### 必須項目
- [ ] 10個のファイルを作成した
- [ ] すべてのテストが成功する
- [ ] エラーが出ない

### 推奨項目
- [ ] 各クラスに docstring がある
- [ ] 型ヒントが付いている
- [ ] コメントが適切にある

### 発展項目
- [ ] 独自の機能を追加した
- [ ] 新しいテストを書いた
- [ ] GitHub にアップロードした

---

## 🔧 デバッグのコツ

### 1. print デバッグ

```python
def method(self):
    print(f"DEBUG: _name = {self._name}")  # 値を確認
    print(f"DEBUG: type = {type(self._name)}")  # 型を確認
    return self._name
```

### 2. 型チェック

```python
# 変数の型を確認
print(type(obj))  # <class 'Staff'>

# インスタンスチェック
print(isinstance(obj, Employee))  # True/False
```

### 3. 属性チェック

```python
# 属性の一覧を表示
print(dir(obj))

# 属性があるか確認
print(hasattr(obj, '_name'))  # True/False
```

---

## 📈 次のステップ

### 初級卒業後
1. **データベース連携**: SQLiteで永続化
2. **GUI作成**: Tkinterでウィンドウアプリ
3. **Web化**: FlaskでWebアプリ化

### おすすめ学習リソース
- Python公式ドキュメント
- Real Python（英語）
- PyQ（日本語）
- Udemy のPythonコース

### 実践プロジェクト案
- 📝 TODOリスト管理システム
- 📚 図書館管理システム
- 🏪 在庫管理システム
- 💰 家計簿アプリ

---

## ⚡ クイックリファレンス

### クラスの基本形

```python
class ClassName:
    """クラスの説明"""
    
    def __init__(self):
        """初期化"""
        self.attribute = value
    
    def method(self):
        """メソッド"""
        return self.attribute
```

### 継承の基本形

```python
class Child(Parent):
    """子クラス"""
    
    def __init__(self):
        """初期化"""
        super().__init__()  # 親を初期化
        self.new_attr = value
```

### テストの基本形

```python
class TestClass(unittest.TestCase):
    """テストクラス"""
    
    def setUp(self):
        """準備"""
        self.obj = ClassName()
    
    def test_something(self):
        """テスト"""
        self.assertEqual(actual, expected)
```

---

## 🎉 完成おめでとうございます！

このプロジェクトを完成させたあなたは：

✅ **初級レベル達成**
- クラスの作成と使用
- 継承の理解と実装
- 基本的なOOP設計

✅ **中級レベル到達**
- デコレータの使用
- プロパティの実装
- ユニットテストの作成

✅ **実務に近いスキル**
- チーム開発の基礎
- テスト駆動開発（TDD）
- コードの品質管理

---

**作成**: 2025年  
**対象**: 新人エンジニア・プログラミング初心者  
**ライセンス**: 学習目的で自由に使用可

**Happy Coding! 🚀**
