# 📝 IPO設計テンプレート（記入例）

社員管理システムの実際の記入例です。参考にしてください。

---

## 📌 プロジェクト情報

```
プロジェクト名: 社員管理システム

作成日: 2025年10月27日

作成者: Python太郎

目的: Pythonのオブジェクト指向プログラミングを学習するため
     社員情報を管理し、解雇処理などを実装する
```

---

## ステップ1: IPO分析（記入例）

### 🎯 全体のIPO

```
┌──────────────────────────────────────────┐
│  システム名: 社員管理システム            │
├──────────────────────────────────────────┤
│ Input (入力) - 何を受け取る？             │
│ ・社員情報（名前、給料、部署）            │
│ ・社長情報（名前、給料）                  │
│ ・解雇対象者の名前                        │
│ ・表示要求                                │
├──────────────────────────────────────────┤
│ Process (処理) - 何をする？               │
│ ・社員オブジェクトの作成                  │
│ ・社員リストへの追加                      │
│ ・リストから社員を削除（解雇）            │
│ ・社員数のカウント（社長含む）            │
├──────────────────────────────────────────┤
│ Output (出力) - 何を返す？                │
│ ・社員一覧（名前、給料、部署）            │
│ ・社長情報（名前+「社長」、給料）         │
│ ・解雇通知メッセージ                      │
│ ・現在の社員数                            │
└──────────────────────────────────────────┘
```

### 📋 各機能のIPO

#### 機能1: 社員登録

```
Input (入力):
  ・社員の名前（文字列）
  ・社員の給料（整数）
  ・社員の所属部署（文字列）

Process (処理):
  ・Staffオブジェクトを作成
  ・名前、給料、部署を設定
  ・会社の社員リストに追加

Output (出力):
  ・なし（内部状態の変更のみ）
  ・リストに追加されたことの確認
```

#### 機能2: 社員解雇（社長による）

```
Input (入力):
  ・解雇する社員の名前（文字列）

Process (処理):
  ・社員リストをループ
  ・名前が一致しない社員だけを残す
  ・リスト内包表記で新しいリスト作成

Output (出力):
  ・「[解雇通知] ○○さんを解雇しました」
  ・デストラクタによる削除メッセージ
```

#### 機能3: 情報表示

```
Input (入力):
  ・なし（会社の内部データを使用）

Process (処理):
  ・社員リストをfor文でループ
  ・各社員のget_name(), get_salary(), get_division()を呼ぶ
  ・f-stringで整形

Output (出力):
  ・「名前：○○、給料：○○円、所属：○○」
  ・社長は「名前：○○社長、給料：○○円」
```

---

## ステップ2: 要件定義（記入例）

### 📝 機能要件チェックリスト

```
必須機能:
[✓] 社員情報の管理（名前、給料、部署）
[✓] 社長情報の管理（名前、給料、肩書き）
[✓] 社員の追加機能
[✓] 社員の解雇機能（dismiss）
[✓] 社員の解雇手続き（set_dismissal_procedure）
[✓] 情報表示機能
[✓] 社員数カウント（社長含む）

オプション機能:
[ ] 社員検索機能
[ ] 給料昇給機能
[ ] CSVファイル保存機能
```

### 🎨 非機能要件

```
保守性:
[✓] 各クラスを別ファイルに分ける
[✓] 適切な命名規則を使用

再利用性:
[✓] Employeeを基底クラスにする
[✓] 継承を活用する

可読性:
[✓] Docstringを全メソッドに記述
[✓] 型ヒントを使用
[✓] プロパティで直感的なアクセス

拡張性:
[✓] デコレータで機能追加しやすく
[✓] デストラクタでリソース管理
```

### 📊 制約条件

```
技術的制約:
・Python 3.6以上を使用
・外部ライブラリは使わない（標準ライブラリのみ）

実装上の制約:
・Employeeを基底クラスとする
・StaffとPresidentはEmployeeを継承
・Presidentのget_name()はオーバーライド必須
・Companyのstaffs、ceoはプロパティで実装
・社員数表示はデコレータで実装

その他の制約:
・ファイル数は最大5個（各クラス+ main）
・1クラス100行以内を目安
```

---

## ステップ3: クラス設計（記入例）

### 🏗️ クラス一覧

#### クラス1: Employee

```
役割: すべての社員の基底クラス。名前と給料を管理。

属性（変数）:
  - _name        : str   (型)  # 説明: 社員の名前
  - _salary      : int   (型)  # 説明: 社員の給料

メソッド:
  - get_name()            -> str   # 説明: 名前を取得
  - set_name(emp_name)    -> None  # 説明: 名前を設定
  - get_salary()          -> int   # 説明: 給料を取得
  - set_salary(emp_salary)-> None  # 説明: 給料を設定
  - __init__()            -> None  # 説明: コンストラクタ
  - __del__()             -> None  # 説明: デストラクタ

継承: [✓] なし  [ ] あり（親: __________________)
```

#### クラス2: Staff

```
役割: 一般社員クラス。Employeeに部署情報を追加。

属性（変数）:
  - _name        : str   (型)  # 説明: 社員の名前（継承）
  - _salary      : int   (型)  # 説明: 社員の給料（継承）
  - _division    : str   (型)  # 説明: 所属部署（追加）

メソッド:
  - get_division()           -> str   # 説明: 部署を取得
  - set_division(emp_division)-> None # 説明: 部署を設定
  - __init__()               -> None  # 説明: コンストラクタ
  - __del__()                -> None  # 説明: デストラクタ

継承: [ ] なし  [✓] あり（親: Employee）
```

#### クラス3: President

```
役割: 社長クラス。Employeeを継承し、会社への参照と解雇権限を持つ。

属性（変数）:
  - _name        : str     (型)  # 説明: 社長の名前（継承）
  - _salary      : int     (型)  # 説明: 社長の給料（継承）
  - _company     : Company (型)  # 説明: 所属会社への参照（追加）

メソッド:
  - get_name()              -> str   # 説明: 名前+「社長」を取得（オーバーライド）
  - dismiss(name)           -> None  # 説明: 指定社員を解雇
  - __init__(company)       -> None  # 説明: コンストラクタ
  - __del__()               -> None  # 説明: デストラクタ

継承: [ ] なし  [✓] あり（親: Employee）
```

#### クラス4: Company

```
役割: 会社クラス。全社員と社長を統括管理。

属性（変数）:
  - _staffs      : List[Staff] (型)  # 説明: 社員リスト
  - _ceo         : President   (型)  # 説明: 社長

メソッド:
  - staffs (property)              -> List[Staff] # 説明: 社員リスト取得
  - ceo (property)                 -> President   # 説明: 社長取得
  - set_dismissal_procedure(name)  -> None        # 説明: 解雇手続き（デコレータ付き）
  - __init__()                     -> None        # 説明: コンストラクタ
  - __del__()                      -> None        # 説明: デストラクタ

継承: [✓] なし  [ ] あり（親: __________________)
```

### 🔗 クラス関連図（手書き用スペース）

```
クラス間の関係:

        Employee (基底)
           ▲
           │ 継承
    ┌──────┴──────┐
    │             │
  Staff      President
               │
               │ 参照
               ↓
            Company
            │    │
            │    └── _ceo: President
            │
            └── _staffs: List[Staff]
```

---

## ステップ4: データ構造設計（記入例）

### 📊 各クラスのデータモデル

#### クラス1: Employee

```python
{
    "_name": str,       # 説明: 社員の名前（プライベート変数）
    "_salary": int,     # 説明: 社員の給料（プライベート変数）
}
```

**初期値:**
```
_name = ""         # 空文字列
_salary = 0        # ゼロ
```

#### クラス2: Staff

```python
{
    "_name": str,       # 説明: 社員の名前（継承）
    "_salary": int,     # 説明: 社員の給料（継承）
    "_division": str,   # 説明: 所属部署（Staff独自）
}
```

**初期値:**
```
_name = ""         # 親から継承（super().__init__()で初期化）
_salary = 0        # 親から継承（super().__init__()で初期化）
_division = ""     # 空文字列
```

#### クラス3: President

```python
{
    "_name": str,       # 説明: 社長の名前（継承）
    "_salary": int,     # 説明: 社長の給料（継承）
    "_company": Company,# 説明: 所属会社への参照（President独自）
}
```

**初期値:**
```
_name = ""         # 親から継承
_salary = 0        # 親から継承
_company = (引数で受け取った会社インスタンス)
```

#### クラス4: Company

```python
{
    "_staffs": List[Staff],  # 説明: 社員のリスト
    "_ceo": President,       # 説明: 社長のインスタンス
}
```

**初期値:**
```
_staffs = []       # 空のリスト
_ceo = President(self)  # 自分自身を渡してPresidentを作成
```

---

## ステップ5: メソッド設計（記入例）

### 📝 メソッド詳細設計

#### クラス: Employee メソッド: set_name

```
┌─────────────────────────────────────────┐
│ メソッド名: set_name                    │
├─────────────────────────────────────────┤
│ 目的:                                   │
│ 社員の名前を設定する                    │
│                                         │
├─────────────────────────────────────────┤
│ Input (引数):                           │
│ ・emp_name: str  # 説明: 設定する名前   │
│                                         │
├─────────────────────────────────────────┤
│ Process (処理):                         │
│ 1. 引数emp_nameを受け取る               │
│ 2. self._nameに代入する                 │
│ 3. 特にバリデーションなし               │
│                                         │
├─────────────────────────────────────────┤
│ Output (戻り値):                        │
│ ・型: None  # 説明: 何も返さない        │
│                                         │
├─────────────────────────────────────────┤
│ 特記事項:                               │
│ シンプルなsetter。将来的にバリデーション│
│ 追加も可能。                            │
└─────────────────────────────────────────┘
```

#### クラス: President メソッド: get_name

```
┌─────────────────────────────────────────┐
│ メソッド名: get_name (オーバーライド)   │
├─────────────────────────────────────────┤
│ 目的:                                   │
│ 社長の名前を「社長」という肩書き付きで  │
│ 取得する                                │
│                                         │
├─────────────────────────────────────────┤
│ Input (引数):                           │
│ ・なし（selfのみ）                      │
│                                         │
├─────────────────────────────────────────┤
│ Process (処理):                         │
│ 1. self._nameを取得                     │
│ 2. 文字列 "社長" を連結                 │
│ 3. 結果を返す                           │
│                                         │
├─────────────────────────────────────────┤
│ Output (戻り値):                        │
│ ・型: str  # 説明: 名前+"社長"          │
│                                         │
├─────────────────────────────────────────┤
│ 特記事項:                               │
│ 親クラスのget_name()をオーバーライド。  │
│ 名前が空でも"社長"だけ返る。            │
└─────────────────────────────────────────┘
```

#### クラス: President メソッド: dismiss

```
┌─────────────────────────────────────────┐
│ メソッド名: dismiss                     │
├─────────────────────────────────────────┤
│ 目的:                                   │
│ 指定された名前の社員を会社から解雇する  │
│                                         │
├─────────────────────────────────────────┤
│ Input (引数):                           │
│ ・name: str  # 説明: 解雇する社員の名前 │
│                                         │
├─────────────────────────────────────────┤
│ Process (処理):                         │
│ 1. 会社の社員リストにアクセス           │
│ 2. リスト内包表記で名前が一致しない人を│
│    残す                                 │
│ 3. 新しいリストで上書き                 │
│ 4. 解雇通知メッセージを表示             │
│                                         │
├─────────────────────────────────────────┤
│ Output (戻り値):                        │
│ ・型: None  # 説明: print文で通知のみ   │
│                                         │
├─────────────────────────────────────────┤
│ 特記事項:                               │
│ リスト内包表記使用。該当者がいなくても  │
│ エラーにならない。                      │
└─────────────────────────────────────────┘
```

#### クラス: Company メソッド: set_dismissal_procedure

```
┌─────────────────────────────────────────┐
│ メソッド名: set_dismissal_procedure     │
├─────────────────────────────────────────┤
│ 目的:                                   │
│ 会社として正式な解雇手続きを行う。      │
│ デコレータで社員数も自動表示。          │
│                                         │
├─────────────────────────────────────────┤
│ Input (引数):                           │
│ ・name: str  # 説明: 解雇する社員の名前 │
│                                         │
├─────────────────────────────────────────┤
│ Process (処理):                         │
│ 1. リスト内包表記で該当者を除外         │
│ 2. 新しいリストで上書き                 │
│ 3. 解雇手続き完了メッセージを表示       │
│ 4. デコレータが社員数を自動計算・表示   │
│                                         │
├─────────────────────────────────────────┤
│ Output (戻り値):                        │
│ ・型: None  # 説明: print文で通知       │
│                                         │
├─────────────────────────────────────────┤
│ 特記事項:                               │
│ @print_employee_countデコレータ付き。   │
│ dismissとの違いは、デコレータによる     │
│ 社員数表示がある点。                    │
└─────────────────────────────────────────┘
```

---

## ステップ6: 実装順序計画（記入例）

### 📅 実装スケジュール

```
Phase 1: 基礎実装
  [✓] ファイル名: employee.py  予定: 0.5時間  実績: 0.5時間
  [✓] ファイル名: staff.py     予定: 0.3時間  実績: 0.3時間

Phase 2: 機能実装
  [✓] ファイル名: president.py 予定: 0.3時間  実績: 0.4時間
  [✓] ファイル名: company.py   予定: 0.5時間  実績: 0.6時間

Phase 3: 統合・テスト
  [✓] ファイル名: main.py      予定: 0.3時間  実績: 0.3時間
  [✓] ファイル名: test.py      予定: 0.5時間  実績: 0.4時間

合計予定時間: 2.4時間
合計実績時間: 2.5時間
```

### 🎯 実装の依存関係

```
ステップ1: employee.py （依存なし）
  ↓
ステップ2: staff.py （依存: employee.py）
  ↓
ステップ3: president.py （依存: employee.py、将来company.py）
  ↓
ステップ4: company.py （依存: staff.py、president.py）
  ↓
ステップ5: main.py （依存: company.py、staff.py）
```

---

## ステップ7: 実装チェックリスト（記入例）

### ✅ ファイル1: employee.py

```
基本実装:
[✓] クラス定義
[✓] コンストラクタ（__init__）
[✓] 必須メソッド1: get_name()
[✓] 必須メソッド2: set_name()
[✓] 必須メソッド3: get_salary(), set_salary()

品質:
[✓] 型ヒント追加
[✓] Docstring追加
[✓] デストラクタ追加
[✓] コメント追加

テスト:
[✓] 単体テスト作成
[✓] テスト実行
[✓] エラー修正
```

### ✅ ファイル2: staff.py

```
基本実装:
[✓] クラス定義
[✓] 継承（親: Employee）
[✓] super().__init__()
[✓] 必須メソッド1: get_division()
[✓] 必須メソッド2: set_division()

品質:
[✓] 型ヒント追加
[✓] Docstring追加
[✓] デストラクタ追加
[✓] コメント追加

テスト:
[✓] 単体テスト作成
[✓] テスト実行
[✓] エラー修正
```

### ✅ ファイル3: president.py

```
基本実装:
[✓] クラス定義
[✓] 継承（親: Employee）
[✓] super().__init__()
[✓] 必須メソッド1: get_name()（オーバーライド）
[✓] 必須メソッド2: dismiss()

品質:
[✓] 型ヒント追加（'Company'をクォート付き）
[✓] Docstring追加
[✓] デストラクタ追加
[✓] TYPE_CHECKING使用（循環インポート回避）

テスト:
[✓] 単体テスト作成
[✓] テスト実行
[✓] エラー修正
```

### ✅ ファイル4: company.py

```
基本実装:
[✓] クラス定義
[✓] デコレータ関数定義（print_employee_count）
[✓] コンストラクタ（__init__）
[✓] プロパティ1: staffs
[✓] プロパティ2: ceo
[✓] 必須メソッド: set_dismissal_procedure（デコレータ付き）

品質:
[✓] 型ヒント追加
[✓] Docstring追加
[✓] デストラクタ追加
[✓] @wraps使用（デコレータ内）

テスト:
[✓] 単体テスト作成
[✓] テスト実行
[✓] エラー修正
```

---

## ステップ8: テスト計画（記入例）

### 🧪 テストケース一覧

#### テストケース1

```
テスト項目: Employee基本機能テスト

テスト内容:
  ・Employeeインスタンスを作成
  ・名前と給料を設定
  ・get_name()、get_salary()で取得
  ・正しく設定・取得できるか確認

期待結果:
  ・設定した値が正しく取得できる
  ・型が正しい（str、int）

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: 問題なし
```

#### テストケース2

```
テスト項目: Staff継承テスト

テスト内容:
  ・Staffインスタンスを作成
  ・親のメソッド（set_name）が使えるか
  ・自分のメソッド（set_division）が使えるか
  ・すべての値を設定して取得

期待結果:
  ・親のメソッドが正常に動作
  ・自分のメソッドも正常に動作
  ・isinstance(staff, Employee)がTrue

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: 継承正常動作確認
```

#### テストケース3

```
テスト項目: Presidentオーバーライドテスト

テスト内容:
  ・Companyインスタンスを作成
  ・President（ceo）の名前を設定
  ・get_name()で取得
  ・「社長」が付いているか確認

期待結果:
  ・"太郎"と設定したら"太郎社長"が返る
  ・親のget_name()とは異なる動作

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: オーバーライド正常動作
```

#### テストケース4

```
テスト項目: 解雇処理テスト

テスト内容:
  ・会社に2人の社員を追加
  ・President.dismiss()で1人解雇
  ・社員リストが1人に減っているか確認

期待結果:
  ・解雇前: 2人
  ・解雇後: 1人
  ・解雇通知メッセージが表示される

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: リスト内包表記正常動作
```

#### テストケース5

```
テスト項目: デコレータ動作テスト

テスト内容:
  ・会社に2人の社員を追加
  ・set_dismissal_procedure()で1人解雇
  ・「現在わが社の社員数は○人」が表示されるか

期待結果:
  ・解雇手続き完了メッセージ表示
  ・デコレータによる社員数メッセージ表示
  ・社員数は社長含む（解雇後: 2人）

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: デコレータ正常動作
```

#### テストケース6

```
テスト項目: プロパティアクセステスト

テスト内容:
  ・company.staffsで社員リストにアクセス
  ・company.ceoで社長にアクセス
  ・()なしでアクセスできるか確認

期待結果:
  ・company.staffsでリストが取得できる
  ・company.ceoでPresidentインスタンスが取得できる
  ・()を付けるとエラーになる

実行日: 2025年10月27日
結果: [✓] 成功  [ ] 失敗
備考: @propertyが正常動作
```

---

## ステップ9: デバッグ記録（記入例）

### 🐛 バグ報告書

#### バグ #1

```
発見日: 2025年10月27日
重要度: [✓] 高  [ ] 中  [ ] 低

現象:
Presidentのget_name()で「社長」が付かない。
親のメソッドがそのまま呼ばれている。

再現手順:
1. Companyインスタンスを作成
2. company.ceo.set_name("太郎")を実行
3. company.ceo.get_name()を実行
4. "太郎"だけ返ってくる（"太郎社長"のはず）

原因:
president.pyでget_name()メソッドを定義し忘れていた。
クラスには書いたがインデントが間違っていた。

対処方法:
President内にget_name()メソッドを追加。
インデントを正しく4スペースに修正。
return self._name + "社長" を実装。

修正日: 2025年10月27日
確認者: Python太郎
```

#### バグ #2

```
発見日: 2025年10月27日
重要度: [ ] 高  [✓] 中  [ ] 低

現象:
company.pyをインポートする際に
ModuleNotFoundError: No module named 'president'

再現手順:
1. main.pyを実行
2. from company import Company で失敗
3. エラーメッセージ表示

原因:
president.pyの保存を忘れていた。
メモ帳で編集したが保存していなかった。

対処方法:
president.pyを保存。
Ctrl+Sで保存を確認。

修正日: 2025年10月27日
確認者: Python太郎
```

#### バグ #3

```
発見日: 2025年10月27日
重要度: [ ] 高  [ ] 中  [✓] 低

現象:
StaffインスタンスでAttributeError: 'Staff' object has no attribute '_name'

再現手順:
1. staff = Staff()を実行
2. staff.set_name("太郎")を実行
3. AttributeErrorが発生

原因:
Staff.__init__()でsuper().__init__()を呼び忘れ。
親の初期化がされていないため_nameが存在しない。

対処方法:
Staff.__init__()の最初にsuper().__init__()を追加。
これで親のコンストラクタが呼ばれる。

修正日: 2025年10月27日
確認者: Python太郎
```

---

## ステップ10: 完成チェックリスト（記入例）

### ✨ 最終確認

#### 機能確認
```
[✓] すべての要件を満たしている
[✓] すべてのテストが成功している
[✓] エラーが発生しない
[✓] 期待通りの出力がされる
[✓] 例外処理が適切（今回は未実装）
```

#### コード品質
```
[✓] Docstringがすべてのクラス・メソッドにある
[✓] 型ヒントが適切に付いている
[✓] 変数名が適切（_付きでプライベート）
[✓] インデントが統一されている（4スペース）
[✓] コメントが適切
[ ] マジックナンバーを定数化（今回は該当なし）
```

#### ドキュメント
```
[ ] README.mdを作成した（次回課題）
[ ] 使い方を記載した
[ ] 必要なライブラリを記載した（標準ライブラリのみ）
[✓] 実行方法を記載した（main.py実行）
```

#### リファクタリング
```
[✓] 重複コードを削除した
[✓] 長いメソッドを分割した（該当なし）
[✓] 適切な設計パターンを適用した（継承、デコレータ）
```

---

## 📊 プロジェクト振り返りシート（記入例）

### 良かった点

```
1. IPO分析から始めたので設計がスムーズだった
   最初に全体像を把握できたことで、何を作れば良いか明確だった

2. 小さく作って段階的にテストしたのでデバッグが楽だった
   employee.py単体でテストしてから次に進んだので、エラーの原因がすぐわかった

3. 継承とオーバーライドの理解が深まった
   実際に手を動かすことで、概念が腹落ちした
```

### 改善点

```
1. 最初にsuper().__init__()を忘れてエラーになった
   次回からは継承したら必ずsuper()を書くことを徹底する

2. ファイルの保存を忘れることが何度かあった
   VSCodeのオートセーブ機能を有効にする

3. デコレータの理解に時間がかかった
   もう少し基礎を復習してから実装すべきだった
```

### 学んだこと

```
1. オブジェクト指向の基本（カプセル化、継承、ポリモーフィズム）
   実際のコードで実装することで、教科書の知識が実践的になった

2. Pythonのプロパティ（@property）の便利さ
   メソッド呼び出しを変数アクセスのように書けるのは直感的

3. デコレータで機能を追加する方法
   元の関数を変更せずに機能追加できるのは保守性が高い
```

### 次回への課題

```
1. 例外処理を追加する
   給料が負の数だったらValueErrorを発生させるなど

2. unittestを使った本格的なテストコードを書く
   今回は簡易テストだったので、次はテストフレームワークを使う

3. データの永続化（CSVやJSONへの保存）
   プログラム終了後もデータが残るようにする
```

---

## 🎓 このテンプレートの活用例

### 他のプロジェクトへの応用

このテンプレートは以下のようなプロジェクトにも使えます：

```
1. 図書館管理システム
   - Book（本）、Member（会員）、Library（図書館）クラス
   - 貸出・返却・検索機能

2. 銀行口座管理システム
   - Account（口座）、Customer（顧客）、Bank（銀行）クラス
   - 入金・出金・振込機能

3. 在庫管理システム
   - Product（商品）、Stock（在庫）、Warehouse（倉庫）クラス
   - 入庫・出庫・棚卸機能
```

### テンプレートのカスタマイズ

プロジェクトに合わせて以下を追加・変更できます：

```
・セキュリティ要件の追加
・パフォーマンス要件の追加
・データベース設計の追加
・UI/UX設計の追加
・API設計の追加
```

---

**このテンプレートで、あなたのプロジェクトも成功します！📝✨**
